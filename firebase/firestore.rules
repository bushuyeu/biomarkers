rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if false;
    }

    match /uploads/{uploadId} {
      // Allow user to create their own uploads
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow user to update/delete their uploads
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;

      // Allow reviewers to read uploads within their tenant
      allow read: if isReviewerForTenant(resource.data.tenantId);
    }

    match /tenants/{tenantId}/files/{fileId} {
      allow read: if isReviewerForTenant(tenantId);
      allow write: if false;
    }

    match /tenants/{tenantId} {
      allow read, write: if false;
    }

    function isReviewerForTenant(tenantId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user != null
        && user.tenantId == tenantId
        && (user.role == 'reviewer' || user.role == 'admin');
    }

    // üîê Catch-all: prevent unexpected access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}